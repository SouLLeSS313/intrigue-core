module Intrigue
class UriExploitable < BaseTask

  include Intrigue::Task::Web

  def metadata
    {
      :name => "uri_exploitable",
      :pretty_name => "URI Exploitable Scanner",
      :authors => ["jcran", "@0xsauby"],
      :description => "Bruteforce common paths on a web server looking for exploitable and interesting applications",
      :references => [],
      :allowed_types => ["Uri"],
      :example_entities => [
        {"type" => "Uri", "attributes" => {"name" => "http://intrigue.io"}}
      ],
      :allowed_options => [],
      :created_types => ["Uri"]
    }
  end

  def run
    super

    # Get the uri
    uri = _get_entity_attribute("name")

    # https://github.com/danielmiessler/SecLists/blob/master/vulns/apache.txt
    brute_list = JSON.parse File.read("#{$intrigue_basedir}/data/exploitable.json")

    ###
    ### Get the default case (a page that doesn't exist)
    ###
    response = http_get "#{uri}/#{rand(100000000)}"
    return @task_result.logger.log_error "Unable to connect to site" unless response

    # Default to code
    missing_page_test = :code
    # But select based on the response to our random page check
    case response.code
      when "404"
        missing_page_test = :code
      when "200"
        missing_page_test = :content
        missing_page_content = response.body
      else
        missing_page_test = :code
        missing_page_code = response.code
    end
    # Log our method
    @task_result.logger.log "Missing Page Test: #{missing_page_test}"

    #brute_list = _get_option "brute_list"
    #brute_list = brute_list.split(",") if brute_list.kind_of? String

    # brute_list is a series of checks
    brute_list.each do |item|

      item["check_paths"].each do |dir|

        ## Construct the URI and make the request
        request_uri = "#{uri}#{"/" unless uri[-1] == "/"}#{dir}"
        #@task_result.logger.log "Attempting #{request_uri}"
        response = http_get request_uri
        next unless response

        ## If we are able to guess based on the code, we're super lucky!
        if missing_page_test == :code
          #@task_result.logger.log "Checking if a missing page based on code"

          case response.code
            when "404"
              @task_result.logger.log "404 on #{request_uri}"
            when "200"
              @task_result.logger.log_good "200! Creating a page for #{request_uri}"
              _create_entity "Uri",
                "name" => request_uri,
                "check_name" => item["check_name"],
                "uri" => request_uri,
                "response_code" => response.code
            when "500"
              @task_result.logger.log_good "500 error! Creating a page for #{request_uri}"
              #_create_entity "Uri",
              #  "name" => request_uri,
              #  "check_name" => item["check_name"],
              #  "uri" => request_uri,
              #  "response_code" => response.code
            when missing_page_code
              @task_result.logger.log "Got code: #{response.code}. Same as missing page code. Skipping"
            else
              @task_result.logger.log_error "Don't know this response code? #{response.code} (#{request_uri})"
              #_create_entity "Uri",
              #  "name" => request_uri,
              #  "check_name" => item["check_name"],
              #  "uri" => request_uri,
              #  "response_code" => response.code
          end

        ## Otherwise, let's guess based on the content. Does this page look
        ## like a missing page?
        elsif missing_page_test == :content
          @task_result.logger.log "checking if a missing page based on content"

          if response.body[0..49] == missing_page_content[0..49]
            @task_result.logger.log "#{request_uri} looks like a missing page based on the first 50 characters"
          elsif response.body.include? "404"
            @task_result.logger.log "Guessing #{request_uri} is a missing page based on it containing a string: 404"
          else
            @task_result.logger.log "#{request_uri} looks like a new page"
            _create_entity "Uri",
              "name" => request_uri,
              "check_name" => item["check_name"],
              "uri" => request_uri,
              "response_code" => response.code
          end

        end
      end # end dir
    end # end item
  end # end run

end
end
